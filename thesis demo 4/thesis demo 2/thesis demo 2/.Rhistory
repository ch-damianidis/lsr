# Φόρτωση βιβλιοθηκών
library(dplyr)
library(tidyr)
library(readr)
# ---- 1. Συνάρτηση προσαρμογής Weibull καμπύλης ----
fit_weibull_survival <- function(times, survival_probs) {
nls_model <- nls(
survival_probs ~ exp(-(times / scale)^shape),
start = list(scale = 30, shape = 1),
algorithm = "port",
lower = c(0.01, 0.01)
)
coefs <- coef(nls_model)
return(coefs)
}
# ---- 2. Συνάρτηση υπολογισμού hazard από Weibull ----
hazard_weibull <- function(t, scale, shape) {
(shape / scale) * (t / scale)^(shape - 1)
}
# ---- 3. Εκτίμηση HR από σημεία S(t) ----
estimate_HR_from_st <- function(df, ref_arm, eval_time = 24) {
arms <- unique(df$arm)
# Έλεγχοι εγκυρότητας
if (length(arms) != 2 || !(ref_arm %in% arms)) return(NULL)
fits <- lapply(arms, function(arm) {
dat <- df %>% filter(arm == !!arm)
if (nrow(dat) < 2) return(NULL)
fit_weibull_survival(dat$time_months, dat$survival)
})
if (any(sapply(fits, is.null))) return(NULL)
names(fits) <- arms
hazards <- sapply(fits, function(p) hazard_weibull(eval_time, scale = p["scale"], shape = p["shape"]))
test_arm <- setdiff(arms, ref_arm)
if (!(test_arm %in% names(hazards))) return(NULL)
HR <- hazards[[test_arm]] / hazards[[ref_arm]]
logHR <- log(HR)
selogHR <- 0.2 * abs(logHR)  # placeholder SE
return(data.frame(
treat1 = ref_arm,
treat2 = test_arm,
logHR = logHR,
selogHR = selogHR
))
}
# ---- 4. Ανάγνωση δεδομένων ----
library(readr)
mock_survival_data <- read_csv("C:/Users/kyriakos/OneDrive/Υπολογιστής/Υπολογισμός καμπυλών kaplan meier/mock_survival_data.csv")
# ---- 5. Υπολογισμός HR ανά μελέτη ----
results <- data %>%
group_by(study) %>%
group_split() %>%
lapply(function(study_data) {
estimate_HR_from_st(study_data, ref_arm = "FCR", eval_time = 24)
}) %>%
bind_rows()
# ---- 6. Προσθήκη μελέτης στο output ----
results$study <- unique(data$study)[1:nrow(results)]
# ---- 7. Εκτύπωση και αποθήκευση ----
print(results)
# ---- 8. (προαιρετικά) Αποθήκευση σε CSV για χρήση στο netmeta ----
write_csv(results, "nma_ready_output.csv")
data <- read_csv("C:/Users/kyriakos/OneDrive/Υπολογιστής/Υπολογισμός καμπυλών kaplan meier/mock_survival_data.csv")
# ---- 5. Υπολογισμός HR ανά μελέτη ----
results <- data %>%
group_by(study) %>%
group_split() %>%
lapply(function(study_data) {
estimate_HR_from_st(study_data, ref_arm = "FCR", eval_time = 24)
}) %>%
bind_rows()
# ---- 6. Προσθήκη μελέτης στο output ----
results$study <- unique(data$study)[1:nrow(results)]
# ---- 7. Εκτύπωση και αποθήκευση ----
print(results)
# ---- 8. (προαιρετικά) Αποθήκευση σε CSV για χρήση στο netmeta ----
write_csv(results, "nma_ready_output.csv")
View(results)
#
#
#
#
#
# Φόρτωση βιβλιοθηκών
library(dplyr)
library(tidyr)
library(readr)
# ---- 1. Συνάρτηση προσαρμογής Weibull καμπύλης ----
fit_weibull_survival <- function(times, survival_probs) {
nls_model <- nls(
survival_probs ~ exp(-(times / scale)^shape),
start = list(scale = 30, shape = 1),
algorithm = "port",
lower = c(0.01, 0.01)
)
coefs <- coef(nls_model)
return(coefs)
}
# ---- 2. Συνάρτηση υπολογισμού hazard από Weibull ----
hazard_weibull <- function(t, scale, shape) {
(shape / scale) * (t / scale)^(shape - 1)
}
# ---- 3. Εκτίμηση HR από σημεία S(t) ----
estimate_HR_from_st <- function(df, ref_arm, eval_time = 24) {
arms <- unique(df$arm)
# Έλεγχοι εγκυρότητας
if (length(arms) != 2 || !(ref_arm %in% arms)) return(NULL)
fits <- lapply(arms, function(arm) {
dat <- df %>% filter(arm == !!arm)
if (nrow(dat) < 2) return(NULL)
fit_weibull_survival(dat$time_months, dat$survival)
})
if (any(sapply(fits, is.null))) return(NULL)
names(fits) <- arms
hazards <- sapply(fits, function(p) hazard_weibull(eval_time, scale = p["scale"], shape = p["shape"]))
test_arm <- setdiff(arms, ref_arm)
if (!(test_arm %in% names(hazards))) return(NULL)
HR <- hazards[[test_arm]] / hazards[[ref_arm]]
logHR <- log(HR)
selogHR <- 0.2 * abs(logHR)  # placeholder SE
return(data.frame(
treat1 = ref_arm,
treat2 = test_arm,
logHR = logHR,
selogHR = selogHR
))
}
# ---- 4. Ανάγνωση δεδομένων ----
library(readr)
data <- read_csv("C:/Users/kyriakos/OneDrive/Υπολογιστής/Υπολογισμός καμπυλών kaplan meier/mock_survival_data.csv")
# ---- 5. Υπολογισμός HR ανά μελέτη ----
results <- data %>%
group_by(study) %>%
group_split() %>%
lapply(function(study_data) {
estimate_HR_from_st(study_data, ref_arm = "FCR", eval_time = 24)
}) %>%
bind_rows()
# ---- 6. Προσθήκη μελέτης στο output ----
results$study <- unique(data$study)[1:nrow(results)]
# ---- 7. Εκτύπωση και αποθήκευση ----
print(results)
# ---- 8. (προαιρετικά) Αποθήκευση σε CSV για χρήση στο netmeta ----
write_csv(results, "nma_ready_output.csv")
View(results)
View(results)
View(mock_survival_data)
View(data)
# Φόρτωση βιβλιοθηκών
library(dplyr)
library(tidyr)
library(readr)
# ---- 1. Συνάρτηση προσαρμογής Weibull καμπύλης ----
fit_weibull_survival <- function(times, survival_probs) {
nls_model <- nls(
survival_probs ~ exp(-(times / scale)^shape),
start = list(scale = 30, shape = 1),
algorithm = "port",
lower = c(0.01, 0.01)
)
coefs <- coef(nls_model)
return(coefs)
}
# ---- 2. Συνάρτηση υπολογισμού hazard από Weibull ----
hazard_weibull <- function(t, scale, shape) {
(shape / scale) * (t / scale)^(shape - 1)
}
# ---- 3. Εκτίμηση HR από σημεία S(t) ----
estimate_HR_from_st <- function(df, ref_arm, eval_time = 24) {
arms <- unique(df$arm)
# Έλεγχοι εγκυρότητας
if (length(arms) != 2 || !(ref_arm %in% arms)) return(NULL)
fits <- lapply(arms, function(arm) {
dat <- df %>% filter(arm == !!arm)
if (nrow(dat) < 2) return(NULL)
fit_weibull_survival(dat$time_months, dat$survival)
})
if (any(sapply(fits, is.null))) return(NULL)
names(fits) <- arms
hazards <- sapply(fits, function(p) hazard_weibull(eval_time, scale = p["scale"], shape = p["shape"]))
test_arm <- setdiff(arms, ref_arm)
if (!(test_arm %in% names(hazards))) return(NULL)
HR <- hazards[[test_arm]] / hazards[[ref_arm]]
logHR <- log(HR)
selogHR <- 0.2 * abs(logHR)  # placeholder SE
return(data.frame(
treat1 = ref_arm,
treat2 = test_arm,
logHR = logHR,
selogHR = selogHR
))
}
# ---- 4. Ανάγνωση δεδομένων ----
library(readr)
data <- read_csv("C:/Users/kyriakos/OneDrive/Υπολογιστής/Υπολογισμός καμπυλών kaplan meier/mock_survival_data.csv")
# ---- 5. Υπολογισμός HR ανά μελέτη ----
results <- data %>%
group_by(study) %>%
group_split() %>%
lapply(function(study_data) {
estimate_HR_from_st(study_data, ref_arm = "FCR", eval_time = 24)
}) %>%
bind_rows()
# ---- 6. Προσθήκη μελέτης στο output ----
results$study <- unique(data$study)[1:nrow(results)]
# ---- 7. Εκτύπωση και αποθήκευση ----
print(results)
# ---- 8. (προαιρετικά) Αποθήκευση σε CSV για χρήση στο netmeta ----
write_csv(results, "nma_ready_output.csv")
View(results)
View(mock_survival_data)
View(data)
View(results)
# Φόρτωση βιβλιοθηκών
library(dplyr)
library(tidyr)
library(readr)
# 1. Προσαρμογή Weibull καμπύλης: S(t) ~ exp(-(t/scale)^shape)
fit_weibull_survival <- function(times, survival_probs) {
if (length(times) < 2 || length(unique(survival_probs)) == 1) return(NULL)
nls_model <- tryCatch({
nls(
survival_probs ~ exp(-(times / scale)^shape),
start = list(scale = 30, shape = 1),
algorithm = "port",
lower = c(0.01, 0.01)
)
}, error = function(e) return(NULL))
if (is.null(nls_model)) return(NULL)
return(coef(nls_model))
}
# 2. Hazard Weibull
hazard_weibull <- function(t, scale, shape) {
(shape / scale) * (t / scale)^(shape - 1)
}
# 3. Εκτίμηση HR
estimate_HR_from_st <- function(df, ref_arm = NULL, eval_time = 24) {
arms <- unique(df$arm)
if (length(arms) != 2) return(NULL)
# Επιλογή reference arm αν δεν έχει δοθεί
if (is.null(ref_arm)) ref_arm <- sort(arms)[1]
if (!(ref_arm %in% arms)) return(NULL)
fits <- lapply(arms, function(arm) {
dat <- df %>% filter(arm == !!arm)
fit_weibull_survival(dat$time_months, dat$survival)
})
if (any(sapply(fits, is.null))) return(NULL)
names(fits) <- arms
hazards <- sapply(fits, function(p) hazard_weibull(eval_time, scale = p["scale"], shape = p["shape"]))
test_arm <- setdiff(arms, ref_arm)
if (!(test_arm %in% names(hazards))) return(NULL)
HR <- hazards[[test_arm]] / hazards[[ref_arm]]
logHR <- log(HR)
selogHR <- 0.2 * abs(logHR)  # placeholder
return(data.frame(
treat1 = ref_arm,
treat2 = test_arm,
logHR = logHR,
selogHR = selogHR
))
}
# 4. Ανάγνωση δεδομένων (δοκίμασε και με εναλλακτικό path αν θες)
data <- read_csv("C:/Users/kyriakos/OneDrive/Υπολογιστής/Υπολογισμός καμπυλών kaplan meier/mock_survival_data.csv")
# 5. Εκτίμηση HR ανά μελέτη
results <- data %>%
group_by(study) %>%
group_split() %>%
lapply(function(study_data) {
estimate_HR_from_st(study_data, eval_time = 24)
}) %>%
bind_rows()
# 6. Προσθήκη study ID στο output
results$study <- rep(unique(data$study), each = 1)[1:nrow(results)]
# 7. Εκτύπωση & έλεγχος
print(results)
View(results)
# 8. (Προαιρετικά) Αποθήκευση για χρήση στο netmeta
write_csv(results, "nma_ready_output.csv")
View(data)
table(data$study, data$arm)
library(dplyr)
library(tidyr)
library(readr)
# 1. Weibull fitting
fit_weibull_survival <- function(times, survival_probs) {
nls_model <- nls(
survival_probs ~ exp(-(times / scale)^shape),
start = list(scale = 30, shape = 1),
algorithm = "port",
lower = c(0.01, 0.01)
)
coef(nls_model)
}
# 2. Hazard function
hazard_weibull <- function(t, scale, shape) {
(shape / scale) * (t / scale)^(shape - 1)
}
# 3. Εκτίμηση HR
estimate_HR_from_st <- function(df, eval_time = 24) {
arms <- unique(df$arm)
if (length(arms) != 2) return(NULL)
fits <- lapply(arms, function(arm) {
dat <- df %>% filter(arm == !!arm)
if (nrow(dat) < 2) return(NULL)
fit_weibull_survival(dat$time_months, dat$survival)
})
if (any(sapply(fits, is.null))) return(NULL)
names(fits) <- arms
hazards <- sapply(fits, function(p) hazard_weibull(eval_time, p["scale"], p["shape"]))
ref_arm <- arms[1]
test_arm <- arms[2]
HR <- hazards[[test_arm]] / hazards[[ref_arm]]
logHR <- log(HR)
selogHR <- 0.2 * abs(logHR)
data.frame(
treat1 = ref_arm,
treat2 = test_arm,
logHR = logHR,
selogHR = selogHR
)
}
# 4. Φόρτωση mock δεδομένων
data <- read_csv("C:/Users/kyriakos/OneDrive/Υπολογιστής/Υπολογισμός καμπυλών kaplan meier/mock_survival_data.csv")
# 5. Εκτίμηση ανά μελέτη
results <- data %>%
group_by(study) %>%
group_split() %>%
lapply(function(study_data) {
cat("\n--- Study:", unique(study_data$study), "---\n")
print(table(study_data$arm))
estimate_HR_from_st(study_data, eval_time = 24)
}) %>%
bind_rows()
# 6. Προσθήκη study
results$study <- unique(data$study)[1:nrow(results)]
# 7. Εκτύπωση
print(results)
library(netmeta)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
get_data_from_redcap <- function() {
read.csv("data/dummy.csv")
}
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("discomb")
?discomb
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(meta)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# Φόρτωση mapping κόμβων
node_map <- read_excel(
"data/HR_data_pairs_connected_fixed.xlsx",
sheet = "node_map"
)
?netcomb
?netcomb
?netcomb
netcomb
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Combine treat1 and treat2 to get all unique treatments present
all_treatments <- unique(c(data$treat1, data$treat2))
runApp()
runApp()
runApp()
runApp()
runApp()
